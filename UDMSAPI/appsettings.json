{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.AspNetCore": "Critical",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*",
  "AppSettings": {
    "FromDate": "2022-09-01 00:00:00.000"
  },
  "ConnectionStrings": {
    "DatabaseConnection": "Server=localhost;Database=OmiRepository;Trusted_Connection=True;"
  },
  "NLog": {
    "autoReload": true,
    "throwConfigExceptions": true,
    "internalLogLevel": "Info",
    "internalLogFile": "c:\\temp\\internal-nlog.txt",
    "extensions": [
      { "assembly": "NLog.Extensions.Logging" }
    ],
    "targets": {
      "database": {
        "type": "Database",
        "commandText": "insert into ExceptionLog ([TimeStamp],[Level],Logger, [Message], UserId, Exception, StackTrace) values (@TimeStamp, @Level, @Logger, @Message, case when len(@UserID) = 0 then null else @UserId end, @Exception, @StackTrace);",
        "parameters": [
          {
            "name": "@timestamp",
            "layout": "${date}"
          },
          {
            "name": "@Level",
            "layout": "${level}"
          },
          {
            "name": "@Message",
            "layout": "${message}"
          },
          {
            "name": "@UserID",
            "layout": "${mdc:user_id}"
          },
          {
            "name": "@Logger",
            "layout": "${logger}"
          },
          {
            "name": "@stacktrace",
            "layout": "${stacktrace}"
          },
          {
            "name": "@Exception",
            "layout": "${exception:tostring}"
          }
        ],
        "dbProvider": "System.Data.SqlClient",
        "connectionString": "Data Source=10.0.0.70;Initial Catalog=YBL_UAT_Testing ;Trusted_Connection=False; User Id=Monica;Password=ybluat@2021;"
      }
    },

    "rules": [
      {
        "logger": "*",
        "minLevel": "Info",
        "writeTo": "database",
        "filterDefaultAction": "Log",
        "filters": [
          {
            "type": "when",
            "condition": "contains('${logger}','Microsoft.AspNetCore')",
            "action": "Ignore"
          }
        ]
      }
    ]
  }
}
